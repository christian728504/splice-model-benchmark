import os
import polars as pl
import warnings
warnings.filterwarnings("ignore", category=pl.exceptions.CategoricalRemappingWarning)

# TODO: track how many reads are thrown out

workdir: '/zata/zippy/ramirezc/splice-model-benchmark/golden_standard'
configfile: 'config/config.yaml'

genome_sizes = subprocess.run(
    ["cut", "-f1,2", "GRCh38_no_alt_analysis_set_GCA_000001405.15.fasta.fai"],
    capture_output=True,
    text=True
)
with open('genome.sizes', 'w') as f:
    f.write(genome_sizes.stdout)

chroms = subprocess.run(["cut", "-f1", "genome.sizes"], capture_output=True, text=True, check=True)
with open('chroms.txt', 'w') as f:
    f.write(chroms.stdout)

metadata = pl.read_csv(config["METADATA_FILE"], separator="\t")
biosample_accessions = metadata["Biosample accession"].unique().to_list()

long_read_files = metadata.filter(pl.col("Assay") == "long read RNA-seq")
long_read_biosamples = long_read_files["Biosample accession"].to_list()
long_read_accessions = long_read_files["File accession"].to_list()

short_read_files = metadata.filter(pl.col("Assay") == "total RNA-seq")
short_read_biosamples = short_read_files["Biosample accession"].to_list()
short_read_accessions = short_read_files["File accession"].to_list()

rule all:
    input:
        expand(
            os.path.join(config["OUTPUT_DIR"], "{biosample}", "{file}.filtered.bam"),
            zip,
            biosample=metadata["Biosample accession"].to_list(),
            file=metadata["File accession"].to_list()
        ),
        [
            os.path.join(config["OUTPUT_DIR"], biosample, f"{longread}.{strand}.coverage.bg")
            for biosample, longread in zip(long_read_biosamples, long_read_accessions)
            for strand in ['forward', 'reverse']
        ],
        expand(
            os.path.join(config["OUTPUT_DIR"], "{biosample}", "{longread}.bam.stats"),
            zip,
            biosample=long_read_biosamples,
            longread=long_read_accessions,
        ),
        expand(
            os.path.join(config["OUTPUT_DIR"], "{biosample}", "{longread}.svg"),
            zip,
            biosample=long_read_biosamples,
            longread=long_read_accessions,
        ),
        expand(
            os.path.join(config["OUTPUT_DIR"], "{biosample}", "{longread}.introns.tab"),
            zip,
            biosample=long_read_biosamples,
            longread=long_read_accessions,
        ),
        [
            os.path.join(config["OUTPUT_DIR"], biosample, f"{longread}.{membership}.introns.filtered.tab")
            for biosample, longread in zip(long_read_biosamples, long_read_accessions)
            for membership in ['inclusive', 'exclusive']
        ],
        os.path.join("all_longread_introns.tab"),
        os.path.join("all_shortread_introns.tab"),


include: "rules/download_file.smk"
include: "rules/get_forward_read_coverage.smk"
include: "rules/get_reverse_read_coverage.smk"
include: "rules/get_bam_stats.smk"
include: "rules/filter_introns.smk"
include: "rules/get_introns.smk"
include: "rules/get_all_longread_introns.smk"
include: "rules/get_all_shortread_introns.smk"


        